(()=>{const e=process.env.API_CLASS_ENDPOINT,t=process.env.API_MEDICINE_ENDPOINT;console.log(e),document.addEventListener("DOMContentLoaded",(()=>{const n=document.getElementById("menuIcon"),s=document.getElementById("menu"),i=window.matchMedia("(max-width: 680px)"),l=document.getElementById("medicineTable");l.innerHTML="";const a=document.getElementById("medicineForm"),o=document.getElementById("searchClassInput"),c=document.getElementById("searchClassList"),d=document.getElementById("searchMedicineList"),r=document.getElementById("medicineNameInput"),m=document.getElementById("strength"),u=document.getElementById("interval"),y=document.getElementById("duration"),p=document.getElementById("instruction"),v=document.getElementById("medicineLoading");let C=[];function E(e){l.innerHTML="";const t=l.createTHead().insertRow();t.insertCell(0).textContent="S/N",t.insertCell(1).textContent="Medicine Class",t.insertCell(2).textContent="Medicine Name",t.insertCell(3).textContent="Strength",t.insertCell(4).textContent="Interval / Duration",t.insertCell(5).textContent="Instruction",t.insertCell(6).textContent="Action";const n=l.createTBody();e.forEach(((e,t)=>{const s=n.insertRow();s.insertCell(0).textContent=t+1,s.insertCell(1).textContent=e.class_name,s.insertCell(2).textContent=e.medicine_name,s.insertCell(3).textContent=e.strength,s.insertCell(4).textContent=`${e.interval}/${e.duration}`,s.insertCell(5).textContent=e.instruction;const i=s.insertCell(6),l=document.createElement("button");l.textContent="Remove",l.classList.add("btn","btn-remove"),l.dataset.index=t,i.appendChild(l)}))}function h(){const e=localStorage.getItem("medicines");e?(C=JSON.parse(e),E(C)):(C=[],l.innerHTML="")}function g(e,t){let n;return function(){const s=this,i=arguments;clearTimeout(n),n=setTimeout((()=>e.apply(s,i)),t)}}a.addEventListener("submit",(function(e){try{e.preventDefault();const t=o.dataset.classId,n=o.value.trim(),s=r.dataset.medicineId,i=r.value.trim(),l=m.value.trim(),a=u.value.trim(),c=y.value.trim(),d=p.value.trim();if(!(n&&i&&l&&a&&c&&d))return void alert("Please fill in all fields.");{const e={class_id:t,class_name:n,medicine_id:s,medicine_name:i,strength:l,interval:a,duration:c,instruction:d};C.push(e),localStorage.setItem("medicines",JSON.stringify(C)),E(C),alert("Medicine added successfully!")}o.value="",o.dataset.classId="",r.value="",r.dataset.medicineId="",m.value="",u.value="",y.value="",p.value=""}catch(e){console.error("Failed to add medicine:",e)}})),o.addEventListener("focus",(()=>{c.style.display="block"})),o.addEventListener("click",(()=>{c.style.display="block"})),o.addEventListener("input",g((()=>{const e=o.value.toLowerCase(),t=c.children;Array.from(t).forEach((t=>{t.textContent.toLowerCase().includes(e)?t.style.display="block":t.style.display="none"})),c.style.display=e?"block":"none"}),100)),document.addEventListener("click",(e=>{c.contains(e.target)||e.target===o||(c.style.display="none")})),r.addEventListener("focus",(()=>{d.style.display="block"})),r.addEventListener("click",(()=>{d.style.display="block"})),r.addEventListener("input",g((()=>{const e=r.value.toLowerCase(),t=d.children;Array.from(t).forEach((t=>{t.textContent.toLowerCase().includes(e)?t.style.display="block":t.style.display="none"})),d.style.display=e?"block":"none"}),300)),document.addEventListener("click",(e=>{d.contains(e.target)||e.target===r||(d.style.display="none")})),l.addEventListener("click",(e=>{var t;e.target.classList.contains("btn-remove")&&(t=parseInt(e.target.dataset.index,10),confirm("Are you sure you want to remove this medicine?")&&(C.splice(t,1),localStorage.setItem("medicines",JSON.stringify(C)),E(C)))})),h(),new Promise(((e,t)=>{setTimeout((()=>{n.addEventListener("click",(function(){i.matches&&(s.classList.contains("open")?(n.classList.remove("open"),s.classList.remove("open"),s.classList.add("close"),s.addEventListener("animationend",(function(){s.classList.contains("close")&&(s.style.display="none",s.classList.remove("close"))}),{once:!0})):(menuIcon.classList.add("open"),s.style.display="block",s.classList.add("open")))})),e()}),1e3)})).then((e=>console.log(e))).catch((e=>console.error(e))),h(),async function(){try{const n=await fetch(e);if(!n.ok)throw new Error(`Error fetching data: ${n.status} ${n.statusText}`);(await n.json()).forEach((e=>{const n=document.createElement("li");n.value=e.id,n.textContent=e.name,n.style.cursor="pointer",n.style.paddingInline="0.5rem",n.style.paddingBlock="0.6rem",n.addEventListener("click",(()=>{o.value=e.name,o.dataset.classId=e.id,c.style.display="none",d.style.display="block",async function(e){try{v.style.display="block",d.style.display="block";const s=await fetch(`${t}/${e}`);if(!s.ok)throw new Error(`Error fetching medicines: ${s.status} ${s.statusText}`);n=await s.json(),d.innerHTML="",n.forEach((e=>{const t=document.createElement("li");t.value=e.id,t.textContent=e.medicine_name,t.style.cursor="pointer",t.style.paddingInline="0.5rem",t.style.paddingBlock="0.6rem",t.addEventListener("click",(()=>{r.value=e.medicine_name,r.dataset.medicineId=e.id,d.style.display="none"})),d.appendChild(t)}))}catch(e){console.error("Failed to fetch medicines:",e),alert("Failed to fetch medicines. Please try again later."),d.innerHTML="",d.style.display="none"}finally{v.style.display="none"}var n}(e.id).then((()=>{d.children.length>0&&"No medicines available for this class."!==d.children[0].textContent&&r.focus()}))})),c.appendChild(n)}))}catch(e){console.error(e)}}()}))})();